# بورس تهران

برای چاپ کردن خواناتر مقادیر دیکشنری از پکیج زیر استفاده کردم

```{python}
#| eval: true
import pprint

pp = pprint.PrettyPrinter(depth=4)
```


## گرفتن اطلاعات مستقیم

گرفتن تاریخچه قیمت شاخص

```{python}
#| eval: false
from codal_tsetmc.download.tsetmc.price import get_index_prices_history

get_index_prices_history()
```
```
	date	price	jdate	code	ticker
0	2008-12-04	9248.9	1387-09-14	32097828799138957	INDEX
1	2008-12-05	9248.9	1387-09-15	32097828799138957	INDEX
2	2008-12-06	9178.3	1387-09-16	32097828799138957	INDEX
3	2008-12-07	9130.5	1387-09-17	32097828799138957	INDEX
4	2008-12-08	9089.2	1387-09-18	32097828799138957	INDEX
...	...	...	...	...	...
3551	2023-08-23	1946593.9	1402-06-01	32097828799138957	INDEX
3552	2023-08-26	1993097.2	1402-06-04	32097828799138957	INDEX
3553	2023-08-27	2051471.9	1402-06-05	32097828799138957	INDEX
3554	2023-08-28	2084168.4	1402-06-06	32097828799138957	INDEX
3555	2023-08-29	2095048.9	1402-06-07	32097828799138957	INDEX
```

### گرفتن تایخچه قیمت سهم

```{python}
#| eval: false
symbol = "فولاد"
code = "46348559193224090"
```

```{python}
#| eval: false
from codal_tsetmc.download.tsetmc.price import get_stock_prices_history

get_stock_prices_history(code)
```
```
date	high	low	price	close	open	yesterday	value	volume	count	jdate	code
0	2023-08-29	5730.0	5520.0	5610.0	5530.0	5630.0	5580.0	7.397634e+11	131877599	5665	1402-06-07	46348559193224090
1	2023-08-28	5690.0	5480.0	5580.0	5550.0	5590.0	5500.0	9.294742e+11	166512551	7310	1402-06-06	46348559193224090
2	2023-08-27	5580.0	5270.0	5500.0	5520.0	5340.0	5220.0	1.282123e+12	233151626	9017	1402-06-05	46348559193224090
3	2023-08-26	5310.0	5050.0	5220.0	5260.0	5110.0	5000.0	8.011761e+11	153494477	5931	1402-06-04	46348559193224090
4	2023-08-23	5050.0	4950.0	5000.0	5040.0	4960.0	5000.0	3.489348e+11	69737133	3823	1402-06-01	46348559193224090
...	...	...	...	...	...	...	...	...	...	...	...	...
3630	2007-03-17	1927.0	1896.0	1898.0	1898.0	1896.0	1934.0	2.823901e+10	14877283	1514	1385-12-26	46348559193224090
3631	2007-03-14	1966.0	1934.0	1934.0	1934.0	1934.0	1973.0	5.166638e+10	26705128	1901	1385-12-23	46348559193224090
3632	2007-03-13	1976.0	1915.0	1973.0	1973.0	1976.0	1938.0	2.492415e+11	126270939	5862	1385-12-22	46348559193224090
3633	2007-03-12	1938.0	1938.0	1938.0	1938.0	1938.0	1900.0	1.938795e+11	100041000	9214	1385-12-21	46348559193224090
3634	2007-03-11	1938.0	1900.0	1900.0	1900.0	1900.0	1900.0	8.894372e+11	468077431	7736	1385-12-20	46348559193224090
```

### گرفتن تاریخچه افزایش سرمایه

ابتدا باید لیست شرکت‌های بورسی را بروز نمایید.

```{python}
#| eval: false
from codal_tsetmc.download.tsetmc.capital import get_stock_capitals_history

get_stock_capitals_history(code)
```
```
	date	new	old	code
8	13891125000000	2.580000e+10	1.580000e+10	46348559193224090
7	13920505000000	3.600000e+10	2.580000e+10	46348559193224090
6	13930515000000	5.000000e+10	3.600000e+10	46348559193224090
5	13940726000000	7.500000e+10	5.000000e+10	46348559193224090
4	13971130000000	1.300000e+11	7.500000e+10	46348559193224090
3	13981022000000	2.090000e+11	1.300000e+11	46348559193224090
2	14000303000000	2.930000e+11	2.090000e+11	46348559193224090
1	14010518000000	5.300000e+11	2.930000e+11	46348559193224090
0	14011228000000	8.000000e+11	5.300000e+11	46348559193224090
```

## ساختن دیتابیس

```{dot}
//| echo: false
//| label: fig-inial-database
//| fig-cap: "ترتیب اجرای کدها برای ایجاد دیتابیس"

graph G {
  rankdir=TB
  edge [head="vee"]
  node [shape=box]

  "create_db" -- "init_db" -- "fill_db"
}
```

### ایجاد دیتابیس

برای ذخیره داده‌های مختلف جدولی در دیتابیس تعبیه شده که در وحله اول باید 
آنها را ایجاد کنیم

```{python}
#| eval: false
from codal_tsetmc import create_db

create_db()
```

### پر کردن بخش اطلاعات کلی

برای استفاده از توابع و گرفتن اطلاعات از تمام بازار مانند اطلاعات شرکت‌های لیست شده در کدال و بورس باید دستور زیر اجرا شود.


```{python}
#| eval: false
from codal_tsetmc import init_db

init_db()
```
```
downloading company and stock info from CODAL and TSETMC
This may take several minutes
creating stock with code 57524237583720590
...
...
stock with code 32097828799138957 exist
...
```

### پر کردن تمام پایگاه داده


برای تکمیل یکباره تمام دیتابیس می‌توان از دستور زیر استفاده کرد که به دلیل زمان بر بودن پیشنهاد می‌شود صرفا برای آغاز کار استفاده شود و در ادامه استفاده از پکیج به صورت موردی از توابع دیگر استفاده شود.

::: {.callout-warning}
پر کردن تمام دیتابیس کاری زمان بر است و در حالت کلی استفاده از آن پیشنهاد نمی‌شود.
:::


```{python}
#| eval: false
from codal_tsetmc import fill_db

fill_db()
```
```
downloading company and stock details from CODAL and TSETMC
may take few minutes
This may take several minutes
...
...
Price Download Finished. 
...
...
Capital Download Finished.
For more info go to:
https://github.com/mohsenebrahimyir/codal-tsetmc
```

### گرفتن اطلاعات از دیتابیس

گرفتن اطلاعات از دیتابیس با استفاده از `SQL QUERY`:

```{python}
#| eval: false
from codal_tsetmc import read_table_by_sql_query

read_table_by_sql_query(
	"""
	SELECT * FROM companies
	"""
)
```
```

id	symbol	name	isic	type_code	status_code
0	1	لازما	کارخانه های صنعتی آزمایش	293002	1	2
1	2	لاستیک بارز لرستان	لاستیک بارز لرستان	811085	-1	3
2	3	لاستیک خوزستان	لاستیک خوزستان	811579	-1	3
3	4	لاستیک سیرجان	مجتمع صنایع لاستیک بارز سیرجان	791199	4	2
4	5	لاستیک سیرجان شتاب	لاستیک سیرجان شتاب	811765	-1	3
...	...	...	...	...	...	...
4902	4903	وپارس حافظ	سرمایه گذاری توسعه مدیریت پارس حافظ	46431080	3	2
4903	4904	ورشد خواهان	سرمایه گذاری رشد خواهان جوان	46431085	3	2
4904	4905	سپید	سپید ماکیان	014102	1	0
4905	4906	و پول و سرمایه	سرمایه گذاری همراه پول و سرمایه	46431079	3	2
4906	4907	خیریه حامیان ایتام مهر امام رضا	خیریه حامیان ایتام مهر امام رضا	771074	4	3
4907 rows × 6 columns
```


## اطلاعات سهام

### اطلاعات نماد

همانطور که می‌دانید در سایت بورس ایران سهام‌ها به همراه نمادشان یک کد یکتا هم دارند که برای هر نماد در هر وضعیت بورسی یک کد خاص اختصاص دارد برای مثال برای نماد `دي` در بازار دوم فرابورس کد `44818950263583523` و در بازار پایه زرد فرابورس کد `66416853783916493` در نظر گرفته شده است.

```{python}
#| eval: true
# نماد شاخص کل
shakhes_code = "32097828799138957"
# نماد دي در بازار دوم فرابورس
dey_scnd_code = "44818950263583523"
# نماد دي در بازار پایه فرابورس
dey_paye_code = "66416853783916493"
# نماد فولاد در بازار اول بورس
folad_code = "46348559193224090"
# نماد فملي در بازار اول بورس
fameli_code = "35425587644337450"

# گروه استخراج زغال سنگ
coal_group = "10"
```


برای گرفتن اطلاعات نماد به صورت لحظه‌ای می‌توان از کد زیر استفاده کرد

```{python}
#| eval: true
from codal_tsetmc import get_stock_detail

pp.pprint(get_stock_detail(dey_scnd_code))

print("="*50)

pp.pprint(get_stock_detail(dey_paye_code))
```

در دیتابیس جدولی به اسم 
`stocks`
تعبیه شده که می‌توانید اطلاعات نمادها را در آن ذخیره کنید.


برای گرفتن و ذخیره اطلاعات یک نماد در دیتابیس از کد زیر استفاده میکنیم

```{python}
#| eval: true
from codal_tsetmc import update_stock_table

update_stock_table(dey_paye_code)
```


برای گرفتن و ذخیره اطلاعات چند نماد در دیتابیس از کد زیر استفاده میکنیم

```{python}
#| eval: true
from codal_tsetmc import update_stocks_table

update_stocks_table([dey_paye_code, dey_scnd_code, shakhes_code])
```

اگر جدول
`stocks`
در دیتابیس را مشاهده کنید اطلاعات باید به صورت زیر نمایش داده شود.

![اطلاعات ذخیره شده بانک دی در دیتابیس](assets/img/database-stocks-dey-bank.png)

می‌توانید با کد زیر به شیوه‌های مختلف به اطلاعات دسترسی داشته باشید.


```{python}
#| eval: true
from codal_tsetmc import read_table_by_conditions

read_table_by_conditions(
    table="stocks",
    variable="name",
    value="بانك دي"
)
```

```{python}
#| eval: true
from codal_tsetmc import read_table_by_sql_query

read_table_by_sql_query(
    f"""
    SELECT *
    FROM stocks
    WHERE name = 'بانك دي'
    """
)
```

::: {.callout-warning}

همانطور که می‌بینید استفاده از نماد یا نام آن برای دسترسی به اطلاعات لزوما روش مناسبی نیست و بهتر است برای دقت بیشتر از کد مربوط به آن نماد استفاده شود.

:::

برای افزودن اطلاعات تمام نماد‌های می‌توان از کد زیر استفاده کرد.

```{python}
#| eval: false
from codal_tsetmc import fill_stocks_table

fill_stocks_table()
```
```
stock with code 19101865588701374 exist
stock with code 24455170564393447 exist
stock with code 67327029014085707 exist
...
...
stock with code 65157472039220905 exist
stock with code 6858820559759769 exist
stock with code 69171897374421261 exist
```

### اطلاعات گروه

برای گرفتن گروه‌های نماد‌ها می‌توان از کد زیر استفاده کرد.


```{python}
#| eval: true
from codal_tsetmc import get_stocks_groups

get_stocks_groups()
```


از کد زیر برای ذخیره سازی آن‌ها در جدول 
`stocks_groups`
در دیتابیس می‌توان استفاده کرد.


```{python}
#| eval: false
from codal_tsetmc import fill_stocks_groups_table

fill_stocks_groups_table()
```

## قیمت سهام

قیمت هر سهم رو می‌توان از کد زیر دریافت کرد.

```{python}
#| eval: true
from codal_tsetmc import get_stock_price_daily

date = "14030201"

get_stock_price_daily(folad_code, date)
```


برای هر سهم می‌توان داده‌های تاریخی قیمتی آن را با استفاده از کد زیر دریافت کرد.


```{python}
#| eval: true
from codal_tsetmc import get_stock_prices_history

get_stock_prices_history(folad_code)
```

برای شاخص کل می‌توان داده‌های تاریخی قیمت آن را با استفاده از کد زیر دریافت کرد.


```{python}
#| eval: true
from codal_tsetmc import get_index_prices_history

get_index_prices_history()
```

برای ذخیره سازی داده‌های تاریخی قیمت هر سهم در دیتابیس می‌توان از کد زیر استفاده کرد.


```{python}
#| eval: true
from codal_tsetmc import update_stock_prices

update_stock_prices(folad_code)
```

برای ذخیره سازی داده‌های تاریخی قیمت شاخص کل در دیتابیس می‌توان از کد زیر استفاده کرد.


```{python}
#| eval: true
from codal_tsetmc import update_index_prices

update_index_prices()
```

برای ذخیره سازی چند سهام می‌توان از کد زیر استفاده کرد.


```{python}
#| eval: true
from codal_tsetmc import update_stocks_prices

update_stocks_prices([folad_code, fameli_code])
```

با استفاده از کد زیر می‌توان داده‌های قیمتی گروه خاصی از سهام‌ها را بروز کرد.


```{python}
#| eval: true
from codal_tsetmc import update_stocks_group_prices

update_stocks_group_prices(group_code=coal_group)
```

می‌توانید با کد زیر به شیوه‌های مختلف به اطلاعات قیمتی دسترسی داشته باشید.


```{python}
#| eval: true
from codal_tsetmc import read_table_by_conditions

read_table_by_conditions(
    table="stocks_prices",
    variable="code",
    value=folad_code
)
```

```{python}
#| eval: true
from codal_tsetmc import read_table_by_sql_query

read_table_by_sql_query(
    f"""
    SELECT *
    FROM stocks_prices
    WHERE code = '{folad_code}'
    """
)
```


پر کردن جدول قیمت کل شرکت‌ها

```{python}
#| eval: false
from codal_tsetmc import fill_stocks_prices_table

fill_stocks_prices_table()
```
```
stock: 51810394260474149  group: 69 total progress: 1.89%
...
Price Download Finished.
```

## افزایش سرمایه شرکت

گرفتن افزایش سرمایه سهم به صورت روزانه 


```{python}
#| eval: true
from codal_tsetmc import get_stock_capital_daily

get_stock_capital_daily(folad_code)
```

گرفتن افزایش سرمایه تاریخی سهم


```{python}
#| eval: true
from codal_tsetmc import get_stock_capitals_history

get_stock_capitals_history(folad_code)
```

بروزرسانی جدول افزایش سرمایه در دیتابیس برای یک سهم

```{python}
#| eval: true
from codal_tsetmc import update_stock_capitals

update_stock_capitals(folad_code)
```

بروزرسانی جدول افزایش سرمایه در دیتابیس برای چند سهم


```{python}
#| eval: true
from codal_tsetmc import update_stocks_capitals

update_stocks_capitals([folad_code, fameli_code])
```

بروزرسانی جدول افزایش سرمایه در دیتابیس برای گروهی از سهام‌ها

```{python}
#| eval: true
from codal_tsetmc import update_stocks_group_capitals

update_stocks_group_capitals(coal_group)
```

پر کردن جدول افزایش سرمایه‌ها

```{python}
#| eval: false
from codal_tsetmc import fill_stocks_capitals_table

fill_stocks_capitals_table()
```
```
stock: 51810394260474149  group: 69 total progress: 1.89%
...
Capital Download Finished.
```


## ساختن یک شی سهام

```{python}
#| eval: true
from codal_tsetmc import Stocks

stock = Stocks.query.filter_by(code=folad_code).first()
stock
```

مشاهده مشخصات سهم

```{python}
#| eval: true
print(f"""
symbol: {stock.symbol}
name: {stock.name}
name_en: {stock.name_en}
isin: {stock.isin}
code: {stock.code}
instrument_code: {stock.instrument_code}
instrument_id: {stock.instrument_id}
group_code: {stock.group_code}
group_name: {stock.group_name}
group_type: {stock.group_type}
market_code: {stock.market_code}
market_name: {stock.market_name}
market_type: {stock.market_type}
price: {stock.price}
capital: {stock.capital}
cap: {stock.cap}
""")
```

گرفتن اطلاعات قیمت تاریخی سهم

```{python}
#| eval: true
stock.prices
```

گرفتن اطلاعات افزایش سرمایه تاریخی سهم

```{python}
#| eval: true
stock.capitals
```

گرفتن اطلاعات ارزش بازار تاریخی سهم

```{python}
#| eval: true
stock.market
```

گرفتن اطلاعات ارزش بازار موازی با شاخص تاریخی سهم

```{python}
#| eval: true
stock.index
```

ضریب بتای سهم

```{python}
#| eval: true
stock.beta(during=3650)
```


## رسم نمودار

برای رسم نمودار می‌توان از کد زیر استفاده کرد که توضیح آن از بحث ما خارج است.

```{python}
#| eval: true
import plotly.express as px 
from plotly.subplots import make_subplots
import plotly.graph_objects as go

fig = make_subplots(
    rows=2, row_heights=[0.8, 0.2],
    cols=1, column_widths=[1],
    shared_xaxes=True,
    specs=[[{"secondary_y": True}], [{"secondary_y": True}]]
)

fig.add_trace(
    go.Scatter(
        name="ارزش معاملات",
        x=stock.prices["jdate"].jalali.parse_jalali("%Y%m%d"),
        y=stock.prices["value"]/1e7,
        stackgroup='one',
        marker_size=1,
        mode="lines",
        line_color='blue',
        hovertemplate='<b>ارزش معاملات %{y:,.2f} هزار میلیون ریال</b><br><extra></extra>'
    ),
    secondary_y=False,
    row=2, col=1
)

fig.add_trace(
    go.Scatter(
        name="شاخص کل",
        x=stock.index["jdate"].jalali.parse_jalali("%Y%m%d"),
        y=stock.index["index"],
        line_color='black',
        mode="lines",
        marker_size=2,
        hovertemplate='<b>مقدار %{y:,.2f} هزار واحد</b><br><extra></extra>'
    ),
    secondary_y=True,
    row=1, col=1
)

fig.add_trace(
    go.Scatter(
        name="ارزش بازار فولاد",
        x=stock.index["jdate"].jalali.parse_jalali("%Y%m%d"),
        y=stock.index["market"]/1e7,
        line_color='orange',
        mode="lines",
        marker_size=2,
        hovertemplate='<b>ارزش بازار %{y:,.2f} هزار میلیون ریال</b><br><extra></extra>'
    ),
    secondary_y=False,
    row=1, col=1
)

fig.update_layout(
    font=dict(
        family="Vazirmatn",
        size=12,
        color="black"
    ),
    xaxis=dict(
        title="تاریخ",
        tickformat='%Y-%m-%d',
        # rangeslider_visible=True,
        # rangeslider_thickness=0.04
    ),
    yaxis=dict(
        title="ارزش بازار (هزار میلیون تومان)",
        # range=[0, 1000],
        # type='log'
    ),
    yaxis2=dict(
        title="شاخص کل (واحد)",
        # range=[0, 3000]
    ),
    hoverlabel=dict(align="right"),
    legend=dict(
        x=.1,
        y=.9,
        traceorder="normal",
        font=dict(
            family="Vazirmatn",
            size=12,
            color="black"
        ),
    )
)

fig.show()
```

